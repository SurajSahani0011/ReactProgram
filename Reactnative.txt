Sure, let's go through the basic to advanced structure of a React Native application:

1. **Basic Structure**:
   - **App.js**: Entry point of your React Native application, similar to `index.js` in React web applications.
   - **src/**: Directory containing your application's source code.
     - **components/**: Contains reusable components.
     - **screens/**: Contains the screens of your application.
     - **navigation/**: Contains navigation configuration.
     - **assets/**: Contains static assets like images, fonts, etc.
     - **styles/**: Contains global styles or themes for your application.

2. **Components**:
   - Same as in React, components are the building blocks of your UI. React Native provides components like `View`, `Text`, `Image`, etc., for building UI elements.

3. **Props and State**:
   - React Native components can also receive props and manage state, similar to React web applications.

4. **Styling**:
   - React Native uses a StyleSheet API for styling components. Styles are written using JavaScript objects instead of CSS. Styles can be applied inline or defined globally.

5. **Navigation**:
   - React Navigation is a popular library for handling navigation in React Native applications. It allows you to define navigation stacks, tabs, drawers, etc., to navigate between different screens.

6. **API Requests**:
   - As with web applications, you can make API requests to fetch or send data. Libraries like `fetch`, `axios`, or `GraphQL` are commonly used for this purpose.

7. **Platform-Specific Code**:
   - React Native allows you to write platform-specific code using platform-specific file extensions. For example, `MyComponent.android.js` and `MyComponent.ios.js` contain platform-specific implementations of a component.

8. **Third-Party Libraries**:
   - React Native has a vast ecosystem of third-party libraries for adding functionality to your application, such as authentication, push notifications, maps, etc.

9. **Device Features**:
   - React Native provides APIs to access device features like camera, geolocation, accelerometer, etc., using modules like `react-native-camera`, `react-native-geolocation`, etc.

10. **Debugging and Testing**:
    - React Native applications can be debugged using tools like React Native Debugger or built-in debugging tools of IDEs like Visual Studio Code. Testing frameworks like Jest and Enzyme can be used for unit and integration testing.

11. **Performance Optimization**:
    - React Native applications may require performance optimization for smoother user experience. Techniques include optimizing rendering, reducing unnecessary re-renders, using native modules for heavy computations, etc.

12. **Deployment**:
    - React Native applications can be deployed to app stores (Google Play Store, Apple App Store) similar to native mobile applications. Deployment involves building APK or IPA files and following platform-specific guidelines for submission.

This overview covers the basic to advanced structure of a React Native application, including components, navigation, styling, API requests, platform-specific code, third-party libraries, device features, debugging, testing, performance optimization, and deployment.